#!/usr/bin/env jython
#
#  Author: Hari Sekhon
#  Date: 2013-06-20 18:21:02 +0100 (Thu, 20 Jun 2013)
#
#  http://github.com/harisekhon
#
#  License: see accompanying LICENSE file
#
# vim:filetype=python

""" Jython program to fetch the HDFS native checksums of a file.

Quick way of checking for duplicate files but not checking content itself so differing block sizes will not match

Will be implemented in hadoop-9209 jira for versions 3.0.0, 0.23.7, 2.1.0-beta using a new command line param

hadoop fs -checksum

"""

# BASIC USAGE:  jython -J-cp `hadoop classpath` hadoop_hdfs_get_file_checksum.jy -f /hdfs/path/to/file

__author__  = "Hari Sekhon"
__version__ = 0.2

import os, sys
# Refusing to use either optparse or argparse since it's annoyingly non-portable across different versions of Python
import getopt
#import array
#try:
#    from java.nio import ByteBuffer
#except ImportError, e:
#    print >> sys.stderr, "Couldn't find java.nio class, not running inside Jython?"
#    sys.exit(3)
try:
    from org.apache.hadoop.conf import Configuration
    #from org.apache.hadoop.fs import FileSystem
    from org.apache.hadoop.fs import Path
    from org.apache.hadoop.hdfs import DistributedFileSystem
    from org.apache.hadoop.fs import FileSystem
    from org.apache.hadoop.util import StringUtils
    #from org.apache.hadoop.security import AccessControlException
    #import org.apache.hadoop.security.AccessControlException
    #import java.lang.Exception
    #from java.lang import Byte
    #from java.util import Arrays
except ImportError, e:
    print >> sys.stderr, "Couldn't find Hadoop Java classes, try:  jython -J-cp `hadoop classpath` hadoop_hdfs_get_file_checksum.jy <args>"
    sys.exit(3)

def usage(*msg):
    """ Print usage and exit """

    if msg:
        print >> sys.stderr, "".join(msg)
    print >> sys.stderr, """
usage: %s <hdfs_file_or_dir> [ <hdfs_file_or_dir2> <hdfs_file_or_dir3> ... ]

Fetches HDFS native checksums for one or more files or for all files under any given directory tree

-v --verbose    Verbose mode, prefixes name: algorithm: and checksum: and shows the algo of the checksum
""" % os.path.basename(__file__)
    sys.exit(3)

def printerr(msg):
    """ Print error message to stdout """

    print >> sys.stderr, ">>> %s" % msg

def die(msg, *ec):
    """ Print error message and exit program """
    printerr(msg)
    if ec:
        exitcode = ec[0]
        if exitcode.isdigit():
            if exitcode > 255:
                sys.exit(exitcode % 256)
            else:
                sys.exit(exitcode)
        else:
            printerr("Code error, non-digit passed as second arg to die()")
            sys.exit(2)
    sys.exit(2)

verbose = False
def vprint(msg):
    """ Print if verbose """

    if verbose:
        print msg,


def main():
    """ Parse cli args and launch hdfs_get_file_checksum() """

    try:
        opts, args = getopt.gnu_getopt(sys.argv[1:], "hv", ["help", "usage", "verbose"])
    except getopt.GetoptError, e:
        usage("error: %s" % e)
    for o, a in opts:
        if o in ("-v", "--verbose"):
            global verbose
            verbose = True
        elif o in ("-h", "--help", "--usage"):
            usage()
        else:
            usage()
    filelist = set()
    for arg in args:
        filelist.add(arg)
    if not filelist:
        usage("no file / directory specified")
    filelist = sorted(filelist)
    java_oom     = "java.lang.OutOfMemoryError: Java heap space"
    java_oom_fix = "\nAdd/Increase -J-Xmx<value> command line argument\n"
    try:
        HDFSChecksumReader().print_checksums(filelist)
    except KeyboardInterrupt, e:
        printerr("Caught Control-C...")
        sys.exit(0)
    except Exception, e:
        printerr("Error running HDFSChecksumReader: %s" % e)
        if java_oom in e.message:
            print >> sys.stderr, java_oom_fix
        #import traceback; traceback.print_exc()
        sys.exit(2)
    except:
        printerr("Error: %s" % sys.exc_info()[1].toString())
        if sys.exc_info()[1].toString() == java_oom:
            print >> sys.stderr, java_oom_fix
        #import traceback; traceback.print_exc()
        sys.exit(2)


class HDFSChecksumReader:
    """ Class to hold HDFS Checksum Read state """

    def __init__(self):
        """ Instantiate State """

        conf      = Configuration()
        #self.fs   = DistributedFileSystem.get(conf)
        self.fs   = FileSystem.get(conf)

    def get_path(self, filename):
        """ Return the path object for a given filename """
        try:
            path = Path(filename)
        except Exception, e:
            return None
        if path:
            return path
        else:
            return None

    def print_checksums(self, filelist):
        """ Recurses directories and calls print_checksum(file) per file """

        for filename in filelist:
            path = self.get_path(filename)
            if not path:
                printerr("Failed to get HDFS path object for file " + filename)
                continue
            if not self.fs.exists(path):
                #raise IOError, "HDFS File not found: %s" % filename
                printerr("HDFS file/dir not found: %s" % filename)
                continue
            self.print_checksum_recurse(filename, path)

    def print_checksum_recurse(self, filename, path):
        """ Recurses a path object if directory or passes to print_checksum if file """

        if self.fs.isFile(path):
            self.print_checksum(filename, path)
        elif self.fs.isDirectory(path):
            try:
                l = self.fs.listStatus(path)
                for i in range(0, len(l)):
                    p = l[i].getPath()
                    self.print_checksum_recurse(p.toUri().getPath(), p)
            except:
                printerr(sys.exc_info()[1].message.split("\n")[0])
        else:
            raise IOError, ">>> %s is not a file or directory" % filename

    def print_checksum(self, filename, path):
        """ Prints the HDFS checksum for the given file + fs path object """

        vprint("file:")
        print filename,
        try:
            checksum = self.fs.getFileChecksum(path)
            if checksum:
                vprint("algorithm:")
                print "\t" + checksum.getAlgorithmName(),
                vprint("checksum:")
                print "\t" + StringUtils.byteToHexString(checksum.getBytes(), 0, checksum.getLength())
            else:
                printerr("<NO CHECKSUM for file " + filename + ">")
                return 0
        except Exception, e:
            printerr(e)
        except:
            print ">>> " + sys.exc_info()[1].message.split("\n")[0]
            return 0
        return 1


if __name__ == "__main__":
    main()
